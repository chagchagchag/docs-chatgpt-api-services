{"/installation-and-setting":{"title":"Installation and Setting","data":{"installation-settings#Installation, Settings":""}},"/python-fastapi-streamlit":{"title":"Python Fastapi Streamlit","data":{"python-fastapi-streamlit#Python, FastAPI, Streamlit":""}},"/python-fastapi-streamlit/python-basic":{"title":"Python Basic","data":{"파이썬-기초#파이썬 기초":"","자료형#자료형":"","클래스-선언-정의방법#클래스 선언, 정의방법":"","모듈-정의-import#모듈 정의, import":"","#...":"생각나는 대로 추가하기."}},"/":{"title":"Introduction","data":{"":"ChatGPT, FastAPI, python 을 이용한 여러가지 자동화 도구를 만들어본 과정들을 기록하는 페이지입니다."}},"/python-fastapi-streamlit/fastapi-howto":{"title":"Fastapi Howto","data":{"fastapi-how-to#FastAPI How To":"","참고#참고":"튜토리얼 - 사용자 가이드\nhttps://fastapi.tiangolo.com/ko/","설치#설치":"참고 : https://fastapi.tiangolo.com/ko/#_4\n$ cd temp\r\n$ virtualenv first-demo\r\n\r\n## 가상환경 활성화\r\n$ source first-demo/Scripts/activate\r\n\r\n## fastapi 설치\r\n$ pip install fastapi\r\n$ pip install \"uvicorn[standard]\"\r\n\r\n## 프로젝트 디렉터리 이동\r\n$ cd first-demo/\r\n$ code .","첫-번째-예제#첫 번째 예제":"https://fastapi.tiangolo.com/ko/#_6 의 코드를 복사후 main.py 라는 파일을 만들어서 복사한 내용을 붙여넣어서 저장\nfrom typing import Union\r\n\r\nfrom fastapi import FastAPI\r\n\r\napp = FastAPI()\r\n\r\n\r\n@app.get(\"/\")\r\ndef read_root():\r\n    return {\"Hello\": \"World\"}\r\n\r\n\r\n@app.get(\"/items/{item_id}\")\r\ndef read_item(item_id: int, q: Union[str, None] = None):\r\n    return {\"item_id\": item_id, \"q\": q}\r\n\r\n@app.get(\"/search\")\r\ndef query_item(query: str):\r\n    return {\"your query = \" + query}","실행#실행":"참고 : https://fastapi.tiangolo.com/ko/#_7\n$ uvicorn main:app --reload\n위 명령어는 아래와 같은 의미입니다.\nmain.py 라는 파일 내에 선언한 app 을 실행할 거야. 그리고 --reload 옵션을 통해 수정될때마다 재기동해줘","app#@app":"get, post, put, delete 등의 REST API 연산은 아래와 같이 @app 내에 정의된 데코레이션을 통해 정의 가능합니다.\n@app.get(\"/\")\n@app.get(\"/items/{item_id}\")\n@app.post(\"/items/{item_id}\")\n@app.put(\"/items/{item_id}\")\n@app.delete(\"/items/{item_id}\")\nPOST, PUT 연산의 차이는 아래와 같습니다.\nPOST : 항상 같은 결과값을 보장하지 않는 연산을 수행할 때\n사용자 추가, 댓글 추가 등과 같은 기존상태에서 추가되어 돌려받는 결과가 달라지는 연산들\nPUT : 항상 같은 결과값이 보장되는 멱등성 연산결과를 보장할 때\n사용자 정보 수정, 댓글 수정 등과 같이 한번의 요청에 대해 돌려받는 응답의 \"형식\"이 같을 경우 사용\n응답본문의 내용은 달라지지만 통신시 주고받는 데이터의 형식(상태코드 등)은 달라지지 않는다.","path-variable#Path Variable":"Path Variable 은 예를 들면 아래와 같이 선언 가능합니다.main.py\n# ...\r\n\r\n@app.get(\"/items/{item_id}\")\r\ndef read_item(item_id: int, q: Union[str, None] = None):\r\n    return {\"item_id\": item_id, \"q\": q}","query-parameter#Query Parameter":"Query Parameter 는 예를 들면 아래와 같이 선언 가능합니다.main.py\n# ...\r\n\r\n@app.get(\"/search\")\r\ndef query_item(query: str):\r\n    return {\"your query = \" + query}","api-문서#API 문서":"Swagger 나 Springdoc 같은 API 문서는 http://127.0.0.1:8000/docs 에 접속하면 확인 가능합니다.","eof#EOF":"저는 일반적인 개발팀 내부적으로 필요할만한 기능들을 FastAPI 와 ChatGPT 를 기반으로 제공할 수 있도록 하는 in house tool 을 만들기 위해 Fast API 를 오늘 처음 배웠는데요. 혹시라도 이 글을 읽고 계시는 분 들 중 Python 을 주력으로 사용하시려는 분들이라면 더 자세한 내용은 아래의 내용을 확인하시기 바랍니다.\n튜토리얼 - 사용자 가이드\nhttps://fastapi.tiangolo.com/ko/"}},"/installation-and-setting/python-install":{"title":"Python Install","data":{"python-설치#Python 설치":"파이썬을 설치하는 방법은 아래의 3가지 방법이 있습니다.\npython.org 를 방문해서 다운로드 후 설치\nanaconda 에서 제공하는 SDK 설치\nminiconda 에서 제공하는 SDK 설치\npython.org 에서는 zip 파일을 다운받을수도 있고 installer를 받을수도 있고 매우 다양한 방법이 제공됩니다. 최근에는 docker 기반으로 서비스를 배포하는 경우가 많기에 굳이 python.org 에서 python 을 다운로드 받아서 설치하는 경우가 많지는 않겠지만, 경량화된 버전의 공식 python 을 설치하려면 python.org 에서 다운로드 받아서 설치합니다.anaconda 에서는 부가적으로 설치되는 수학 라이브러리들이 많습니다. 용량도 꽤 크기에 개인적인 용도로 사용하고 싶지는 않았습니다.이번 문서에서 사용하는 python 은 miniconda 에서 제공하는 경량화된 버전의 python 을 사용합니다.","miniconda-방문--python-설치#miniconda 방문 & python 설치":"https://docs.anaconda.com/free/miniconda/index.html 에 방문합니다. 그리고 좌측의 Miniconda → Installing Miniconda 를 클릭합니다.\n원하는 버전을 선택한 후 다운로드합니다.이 다음부터의 설치는 설치될 경로를 제외하고 모두 기본옵션으로 설치해줬습니다.","20240421#2024.04.21":"현재 시점인 2024.04.21 에는 이미 python 을 제가 설치를 해뒀습니다. python.org 를 통해서 설치했던 것으로 보이고 노트북 처음 설치했을때 크롤링을 하려고 했던 건지는 모르겠지만 설치했던 듯 합니다.","virtualenv#virtualenv":"참고\nvirtualenv\ninstallation\nvirtualenv 는 파이썬의 실행환경을 가상환경에서 실행할 수 있도록 도와주는 환경입니다. 어떤 프로젝트의 의존성이 전역적으로 설치되면 다른 프로젝트의 의존성과 충돌되기도 합니다. python 에서는 이런 문제를 해결하기 위해 virtualenv 를 통해 관리가 가능합니다. Nodejs 에서도 이런 가상환경이 있는 것으로 알고있지만 기억은 아나네요!!(ㅠㅠ)","설치#설치":"python -m pip install --user virtualenv\n이외에 다른 방법으로 설치하려면 installation 을 참고해주시면 됩니다. 위의 설치 방법은 virtualenv 를 전역적으로 설치하기 위한 방법입니다.위의 과정을 거친 후에도 윈도우에서는 조금 귀찮은 설정을 하나 더 해주셔야 합니다.설치과정을 보면 아래와 같은 디렉터리가 나타나는데요.\n위에서 나타난 경로 들 중에서 아래의 디렉터리로 이동해봅니다.\nC:\\Users\\user\\AppData\\Roaming\\Python\\Python312\n방문해보면 아래와 같은 디렉터리가 나타나는데요. 그 중 Scripts 디렉터리로 이동합니다.\n그리고 이동한 곳에는 virtualenv 가 존재한다는 사실을 확인 가능합니다.이 virtualenv 를 환경변수의 PATH 에 추가해주면 됩니다. 제 경우에는 V:\\000.env\\usr\\local\\bin 라는 곳에 필요한 바이너리들을 모아두고 V:\\000.env\\usr\\local\\bin 을 윈도우 전역 Path 에 등록해두었기 때문에 virtualenv 파일을 V:\\000.env\\usr\\local\\bin 에 복사해두는 것으로 virtualenv 설치를 마무리했습니다.","사용#사용":"","가상환경-생성#가상환경 생성":"$ virtualenv hello","가상환경-진입#가상환경 진입":"$ source Scripts/activate\r\n(hello)","가상환경에서-나오기#가상환경에서 나오기":"$ deactivate\n참고로 아래와 같이 하면 가상환경에서 나오는 것이 불가능햅니다.\n$ source Scripts/deactivate.bat"}},"/python-fastapi-streamlit/streamlit-howto":{"title":"Streamlit Howto","data":{"streamlit-how-to#Streamlit How To":"","설치#설치":"$ cd temp\r\n$ virtualenv first-demo\r\n\r\n## 프로젝트 디렉터리 이동\r\n$ cd first-demo/\r\n$ code .\r\n\r\n## 가상환경 활성화\r\n$ source ./Scripts/activate\r\n\r\n## streamlit 설치\r\n$ pip install streamlit","첫-번째-코드#첫 번째 코드":"streamlit-demo.py\nimport streamlit as st\r\n\r\nst.write(1234)\r\nst.title(\"1234\")\n실행해봅니다.\n$ streamlit run streamlit-demo.py\n실행결과는 아래와 같습니다.","두-번째-코드#두 번째 코드":"이번에는 마크다운을 출력해봅니다.streamlit-markdown.py\nimport streamlit as st\r\n\r\n\"\"\"\r\n## 제목\r\n### 부제\r\n#### 소제목\r\n\r\n- 홍길동\r\n- 고영희\r\n\"\"\"\r\n실행해봅니다.\n$ streamlit run streamlit-markdown.py\n출력결과는 아래와 같습니다. 마크다운이 잘 출력되었습니다.","세-번째-코드#세 번째 코드":"streamlit-gui-1.py\nimport streamlit as st\r\n\r\ntext = st.text_input(\"이메일을 입력해주세요\")\r\nst.write(text)\r\n\r\nagreeFlag = st.checkbox(\"개인정보 수집 동의\")\r\nif agreeFlag:\r\n    st.success(\"동의합니다.\")\r\n실행해봅니다.\n$ streamlit run streamlit-gui-1.py\n출력결과는 아래와 같습니다.","네-번째-코드#네 번째 코드":"streamlit-gui-2.py\nimport streamlit as st\r\n\r\nfood = st.selectbox(\"다이어트 때 미치는 음식\", {\"라면\", \"신라면\", \"새우깡\", \"삼겹살\", \"피자\"})\r\nst.write(f\"결과 : {food}\")\r\n실행해봅니다.\n$ streamlit run streamlit-gui-2.py\n출력결과는 아래와 같습니다.","다섯-번째-코드#다섯 번째 코드":"streamlit-gui-3.py\nimport streamlit as st\r\n\r\nfoods = st.multiselect(\"다이어트 때 미치는 음식\", {\"라면\", \"신라면\", \"새우깡\", \"삼겹살\", \"피자\"})\r\n\r\nst.write(', '.join(foods))\r\n실행해봅니다.\n$ streamlit run streamlit-gui-3.py\n출력결과","여섯-번째-코드#여섯 번째 코드":"streamlit-gui-4.py\n실행해봅니다.\n$ streamlit run streamlit-gui-4.py"}},"/references":{"title":"References","data":{"":"Referencesminiconda\nminiconda\nMiniconda → Installing Miniconda\nvirtualenv\nvirtualenv\ninstallation\nFastAPI\nFastAPI\nStreamlit\nStreamlit"}}}